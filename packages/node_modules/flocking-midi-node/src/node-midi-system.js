/*
 * Flocking MIDI Node.js System
 * http://github.com/colinbdclark/flocking-midi
 *
 * Copyright 2016, Colin Clark
 * Licensed under the MIT license.
 */

"use strict";

var fluid = fluid || require("infusion"),
    flock = fluid.registerNamespace("flock");

fluid.makeGradeLinkage("flock.midi.nodejs.systemLinker",
    ["flock.midi.system"], "flock.midi.nodejs.system");

fluid.defaults("flock.midi.nodejs.system", {
    gradeNames: "flock.midi.system",

    sysex: false,

    pollForPortChanges: false,
    pollRate: 1,

    model: {
        inputs: {},
        outputs: {}
    },

    components: {
        access: {
            type: "flock.midi.nodejs.access"
        },

        portMonitor: {
            type: "flock.midi.nodejs.portMonitor",
            options: {
                pollRate: "{system}.options.pollRate",
                model: {
                    isActive: "{system}.options.pollForPortChanges"
                }
            }
        }
    },

    invokers: {
        refreshPorts: {
            funcName: "flock.midi.nodejs.system.updatePorts",
            args: ["{that}.access", "{that}.applier"]
        }
    },

    listeners: {
        "onReady.updatePorts": "{that}.refreshPorts()"
    }
});

// TODO: This strategy will fail to recognize multiple ports with the same name.
// RtMidi does not guarantee unique names across all platforms, nor does it provide
// any form of identification or description of ports. It is of
// such poor quality that it essentially can't reliably support dynamic changes
// of the list of ports.
//
// For more information, see: https://github.com/thestk/rtmidi/pull/30
flock.midi.nodejs.system.modelizePort = function (type, portNum, access) {
    var portSpec = {
        type: type,
        num: portNum,
        name: access[type].getPortName(portNum),
        manufacturer: undefined, // RtMidi doesn't provide manufacturer info.
        state: "connected",
        connection: access[type].isPortOpen(portNum) ? "open" : "closed"
    };

    portSpec.id = portSpec.name;

    return portSpec;
};

flock.midi.nodejs.system.modelizePorts = function (type, access) {
    var numPorts = access[type].getPortCount(),
        ports = {};

    for (var i = 0; i < numPorts; i++) {
        var portSpec = flock.midi.nodejs.system.modelizePort(type, i, access);
        ports[portSpec.id] = portSpec;
    }

    return ports;
};

// TODO: This implementation is VERY similar to that in the Web MIDI implementation.
flock.midi.nodejs.system.updatePorts = function (access, applier) {
    var updatedModel = {
        inputs: flock.midi.nodejs.system.modelizePorts("input", access),
        outputs: flock.midi.nodejs.system.modelizePorts("output", access)
    };

    applier.change("", updatedModel);
};
