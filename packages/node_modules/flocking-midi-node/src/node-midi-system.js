/*
 * Flocking MIDI Node.js System
 * http://github.com/colinbdclark/flocking-midi
 *
 * Copyright 2016, Colin Clark
 * Licensed under the MIT license.
 */

"use strict";

var fluid = fluid || require("infusion"),
    flock = fluid.registerNamespace("flock");

fluid.makeGradeLinkage("flock.midi.nodejs.systemLinker",
    ["flock.midi.system"], "flock.midi.nodejs.system");

fluid.defaults("flock.midi.nodejs.system", {
    gradeNames: "flock.midi.system",

    sysex: false,

    pollForPortChanges: false,
    pollRate: 1,

    model: {
        inputs: {},
        outputs: {}
    },

    components: {
        access: {
            type: "flock.midi.nodejs.access"
        },

        portMonitor: {
            type: "flock.midi.nodejs.portMonitor",
            options: {
                pollRate: "{system}.options.pollRate",
                model: {
                    isActive: "{system}.options.pollForPortChanges"
                }
            }
        }
    },

    listeners: {
        "onReady.updatePorts": {
            funcName: "flock.midi.nodejs.system.updatePorts",
            args: ["{that}.access", "{that}"]
        },

        "onRefreshPorts.updatePorts": {
            priority: "after:onRefreshPorts.clearModel",
            funcName: "flock.midi.nodejs.system.updatePorts",
            args: ["{that}.access", "{that}"]
        }
    }
});

// Note: This strategy will fail to recognize multiple ports with the same name.
// RtMidi does not guarantee unique names across all platforms, nor does it provide
// any form of identification or description of ports. It is of
// such poor quality that it essentially can't reliably support dynamic changes
// of the list of ports.
//
// In practice, this seems to primarily affect Mac OS X users. If you're using
// multiple devices with the same name on OS X, use Audio Midi Setup to give them
// unique names.
//
// For more information, see: https://github.com/thestk/rtmidi/pull/30
flock.midi.nodejs.system.modelizePort = function (type, portNum, access) {
    var portSpec = {
        type: type,
        num: portNum,
        name: access[type].getPortName(portNum),
        manufacturer: undefined, // RtMidi doesn't provide manufacturer info.
        state: "connected",
        connection: access[type].isPortOpen(portNum) ? "open" : "closed"
    };

    portSpec.id = portSpec.name;

    return portSpec;
};

flock.midi.nodejs.system.modelizePorts = function (type, access) {
    var numPorts = access[type].getPortCount(),
        ports = {};

    for (var i = 0; i < numPorts; i++) {
        var portSpec = flock.midi.nodejs.system.modelizePort(type, i, access);
        ports[portSpec.id] = portSpec;
    }

    return ports;
};

flock.midi.nodejs.system.updatePorts = function (access, that) {
    var oldModel = that.applier.holder.model;

    var newModel = {
        inputs: flock.midi.nodejs.system.modelizePorts("input", access),
        outputs: flock.midi.nodejs.system.modelizePorts("output", access)
    };

    var trans = that.applier.initiate();

    flock.midi.nodejs.system.clearAllDisconnected(trans, oldModel, newModel);

    trans.fireChangeRequest({
        path: "",
        value: newModel
    });

    trans.commit();
};

flock.midi.nodejs.system.disconnectedPorts = function (oldModel, newModel) {
    var disconnected = {};

    if (!newModel) {
        return oldModel;
    }

    fluid.each(oldModel, function (port) {
        if (!newModel[port.id]) {
            disconnected[port.id] = port;
        }
    });

    return disconnected;
};


flock.midi.nodejs.system.clearDisconnected = function (type, trans, oldModel, newModel) {
    var oldPorts = oldModel[type],
        newPorts = newModel[type],
        disconnected = flock.midi.nodejs.system.disconnectedPorts(oldPorts, newPorts);

    fluid.each(disconnected, function (port) {
        trans.fireChangeRequest({
            segs: [type, port.id],
            value: undefined,
            type: "DELETE"
        });
    });
};

flock.midi.nodejs.system.clearAllDisconnected = function (trans, oldModel, newModel) {
    if (!oldModel) {
        return;
    }

    flock.midi.nodejs.system.clearDisconnected("inputs",
        trans, oldModel, newModel);
    flock.midi.nodejs.system.clearDisconnected("outputs",
        trans, oldModel, newModel);
};
