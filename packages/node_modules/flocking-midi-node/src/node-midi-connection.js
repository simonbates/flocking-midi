"use strict";

var fluid = fluid || require("infusion"),
    flock = fluid.registerNamespace("flock");

// TODO: Note that this implementation is not yet using flock.midi.system

fluid.defaults("flock.midi.connection", {
    gradeNames: ["flock.midi.receiver"],

    // TODO: Support multiple ports per connection
    // TODO: Use id rather than name?
    portName: undefined,

    members: {
        // TODO: This approach of making a single input object will not
        // be suitable when we support multiple ports per connection
        input: "@expand:flock.midi.nodejs.access.createNodeMIDIPort(input)"
    },

    listeners: {
        "onCreate.openPort": {
            funcName: "flock.midi.connection.openPort",
            args: [
                "{that}.input",
                "{that}.options.portName",
                "{that}.events.raw.fire"
            ]
        }
    }
});

flock.midi.connection.openPort = function (input, portName, onRaw) {
    // TODO: Use flock.midi.system.model.ports rather than looking up again
    // TODO: Use id rather than name?
    // TODO: Fire flock.midi.receiver events
    var numInputPorts = input.getPortCount();
    for (var i = 0; i < numInputPorts; i++) {
        if (input.getPortName(i) === portName) {
            // TODO: Extract; see flock.nodejs.wrapMessageListener
            input.on("message", function (deltaTime, data) {
                onRaw({
                    receivedTime: deltaTime,
                    data: data
                });
            });
            input.openPort(i);
            break;
        }
    }
};
