/*
 * Flocking MIDI Core Access
 * http://github.com/colinbdclark/flocking-midi
 *
 * Copyright 2014-2016, Colin Clark
 * Licensed under the MIT license.
 */

"use strict";

var fluid = fluid || require("infusion");

fluid.defaults("flock.midi.access", {
    gradeNames: "fluid.modelComponent",

    sysex: false,

    members: {
        requestTarget: "fluid.mustBeOverridden"
    },

    mergePolicy: {
        "members.requestTarget": "nomerge"
    },

    model: {
        accessGranted: false
    },

    invokers: {
        requestAccess: {
            funcName: "flock.midi.access.requestAccess",
            args: [
                "{that}.options.sysex",
                "{that}.requestTarget",
                "{that}.events.onAccessRequested.fire"
            ]
        }
    },

    events: {
        onAccessRequested: null,
        afterAccessGranted: null,
        onError: null,
        afterPortStateChanged: null
    },

    listeners: {
        "onAccessRequested.bindRequestPromise": {
            funcName: "flock.midi.access.bindAfterAccessGranted",
            args: ["{arguments}.0", "{that}.events.afterAccessGranted.fire"]
        },

        "afterAccessGranted.updateModel": {
            priority: "first",
            changePath: "accessGranted",
            value: true
        },

        "afterAccessGranted.bindPortStateChangeListener": {
            funcName: "flock.midi.access.bindPortStateChangeListener",
            args: ["{arguments}.0", "{that}.events.onPortStateChange.fire"]
        },

        "onError.updatedModel": {
            priority: "first",
            changePath: "accessGranted",
            value: false
        }
    }
});

flock.midi.access.bindAfterAccessGranted = function (accessPromise, afterAccessGranted) {
    accessPromise.then(afterAccessGranted);
};

flock.midi.access.bindPortStateChangeListener = function (access, afterPortStateChanged) {
    access.addEventListener("statechange", afterPortStateChanged);
};

flock.midi.access.requestAccess = function (sysex, requestTarget, onAccessRequested) {
    var p = requestTarget.requestMIDIAccess({
        sysex: sysex
    });

    onAccessRequested(p);
};
