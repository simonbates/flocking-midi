/*
 * Flocking MIDI Core System
 * http://github.com/colinbdclark/flocking-midi
 *
 * Copyright 2014-2016, Colin Clark
 * Licensed under the MIT license.
 */

"use strict";

var fluid = fluid || require("infusion"),
    flock = fluid.registerNamespace("flock");

/**
 * A MIDI System component represents a system of MIDI device ports
 */
fluid.defaults("flock.midi.system", {
    gradeNames: "fluid.modelComponent",

    sysex: false,

    model: {
        ports: {}
    },

    components: {
        access: {
            type: "flock.midi.access"
        }
    },

    invokers: {
        requestAccess: "{that}.access.requestAccess()",
        refreshPorts: "{that}.events.onRefreshPorts.fire",

        // TODO: This needs to be replaced with a model transformation.
        inputs: "flock.midi.system.findPortsOfType(input, {that}.model.ports)",
        outputs: "flock.midi.system.findPortsOfType(output, {that}.model.ports)"
    },

    events: {
        onReady: "{access}.events.afterAccessGranted",
        onRefreshPorts: null,
        afterPortsModelized: null
    },

    listeners: {
        "onReady.updatePorts": {
            func: "{that}.modelizePorts"
        },

        "onRefreshPorts.updatePorts": {
            func: "{that}.modelizePorts"
        },

        "afterPortsModelized.updateModel": {
            funcName: "flock.midi.system.updatePorts",
            args: ["{that}.applier", "{arguments}.0"]
        }
    }
});

flock.midi.system.updatePorts = function (applier, portsModel) {
    var trans = applier.initiate();

    trans.fireChangeRequest({
        path: "ports",
        type: "DELETE"
    });

    trans.fireChangeRequest({
        path: "ports",
        value: portsModel
    });
    
    trans.commit();
};

flock.midi.system.typeFinder = function (type) {
    return function (port) {
        return port.type === type;
    };
};

flock.midi.system.findPorts = function (portsModel, predicate) {
    var found = {};

    fluid.each(portsModel, function (port) {
        if (predicate(port)) {
            found[port.id] = port;
        }
    });

    return found;
};

flock.midi.system.findPortsOfType = function (type, portsModel) {
    return flock.midi.system.findPorts(portsModel,
        flock.midi.system.typeFinder(type));
};
