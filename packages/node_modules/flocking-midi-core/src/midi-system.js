/*
 * Flocking MIDI Core System
 * http://github.com/colinbdclark/flocking-midi
 *
 * Copyright 2014-2016, Colin Clark
 * Licensed under the MIT license.
 */

"use strict";

var fluid = fluid || require("infusion");

fluid.defaults("flock.midi.systemAccess", {
    gradeNames: "flock.midi.access",

    events: {
        afterAccessGranted: "{system}.events.onReady",
        afterPortStateChanged: "{system}.events.afterPortStateChanged"
    }
});

fluid.defaults("flock.midi.system", {
    gradeNames: "fluid.modelComponent",

    model: {
        inputs: {},
        outputs: {}
    },

    invokers: {
        /**
         * Updates this system's ports model.
         *
         * @param {MIDIAccess} a Web MIDI Access object to source the ports from
         */
        updatePorts: {
            funcName: "flock.midi.system.updatePorts",
            args: ["{arguments}.0", "{that}.applier"]
        },

        /**
         * Updates ports model with the specified port.
         *
         * @param {MIDIPort} a Web MIDI MIDIInput or MIDIOutput object to update
         */
        updatePort: {
            funcName: "flock.midi.system.updatePort",
            args: ["{arguments}.0", "{that}.applier"]
        }
    },

    components: {
        access: {
            type: "flock.midi.systemAccess"
        }
    },

    events: {
        onReady: null,
        onPortStateChange: null
    },

    listeners: {
        "onReady.updatePorts": "{that}.updatePorts",
        "onPortStateChange.updatePort": "{that}.updatePort"
    }
});

/**
 * Converts a Web MIDI Access object's ports into a format compatible with
 * the Infusion ChangeApplier.
 *
 * @param {MIDIPortMap} ports a WebMIDI MIDIInputMap or MIDIOutputMap object
 * @return {Object} a modelized structure representing the ports
 */
flock.midi.system.modelizePorts = function (ports) {
    var collected = {};

    ports.forEach(function (port) {
        collected[port.id] = flock.midi.system.modelizePort(port);
    });

    return collected;
};

/**
 * Converts a WebMIDI Port Object into a model object.
 *
 * @param {MIDIPort} a MIDIInput or MIDIOutput object to convert
 * @return {Object} a model object representing the port
 */
flock.midi.system.modelizePort = function (port) {
    return {
        id: port.id,
        name: port.name,
        manufacturer: port.manufacturer,
        state: port.state,
        connection: port.connection
    };
};

flock.midi.system.updatePorts = function (access, applier) {
    var inputs = flock.midi.system.modelizePorts(access.inputs),
        outputs = flock.midi.system.modelizePorts(access.outputs);

    applier.change("inputs", inputs);
    applier.change("outputs", outputs);
};

flock.midi.system.updatePort = function (port, applier) {
    var pathSegs = [port.type, port.id],
        portModel = flock.midi.system.modelizePort(port);

    applier.change(pathSegs, portModel);
};
