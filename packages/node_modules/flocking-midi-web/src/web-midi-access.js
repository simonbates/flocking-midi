/*
 * Flocking Web MIDI Access
 * http://github.com/colinbdclark/flocking-midi
 *
 * Copyright 2014-2016, Colin Clark
 * Licensed under the MIT license.
 */

"use strict";

fluid.defaults("flock.midi.web.access", {
    gradeNames: "flock.midi.access",

    sysex: false,

    members: {
        requestTarget: navigator
    },

    mergePolicy: {
        "members.requestTarget": "nomerge"
    },

    invokers: {
        requestAccess: {
            funcName: "flock.midi.web.access.requestAccess",
            args: [
                "{that}.options.sysex",
                "{that}.requestTarget",
                "{that}.events"
            ]
        }
    },

    events: {
        onNoWebMIDISupport: null,
        onPortChange: null // TODO: Should this event be generalized?
    },

    listeners: {
        "onAccessRequested.bindRequestPromise": {
            funcName: "flock.midi.web.access.bindAfterAccessGranted",
            args: ["{arguments}.0", "{that}.events.afterAccessGranted.fire"]
        },

        "onNoWebMIDISupport.logToConsole": {
            funcName: "fluid.log",
            args: [fluid.logLevel.WARN, "{arguments}.0"]
        },

        "onNoWebMIDISupport.fireErrorEvent": {
            func: "{that}.events.onError.fire",
            args: ["{arguments}.0"]
        },

        "afterAccessGranted.stashAccessObject": {
            funcName: "flock.midi.web.access.stashAccessObject",
            args: ["{arguments}.0", "{that}"]
        },

        "afterAccessGranted.bindPortChange": {
            funcName: "flock.midi.web.access.bindPortChange",
            args: ["{arguments}.0", "{that}.events.onPortChange.fire"]
        }
    }
});

flock.midi.web.access.bindAfterAccessGranted = function (promise, afterAccessGranted) {
    promise.then(afterAccessGranted);
};

flock.midi.web.access.bindPortChange = function (access, onPortChange) {
    access.addEventListener("statechange", function (evt) {
        onPortChange(evt.port);
    });
};

flock.midi.web.access.requestAccess = function (sysex, requestTarget, events) {
    if (!requestTarget.requestMIDIAccess) {
        return events.onNoWebMIDISupport.fire(
            "The Web MIDI API is not available in this browser.");
    }

    var p = requestTarget.requestMIDIAccess({
        sysex: sysex
    });

    events.onAccessRequested.fire(p);
};

flock.midi.web.access.stashAccessObject = function (access, that) {
    that.access = access;
};
